/*In this SQL, I am using a private database containing multiple tables pertaining to customer information, products, sales, and orders. With this database I quantified statistics as shown below. */


/*How many orders were placed in January? ANSWER 9681*/
SELECT COUNT(orderID) FROM BIT_DB.JanSales
    WHERE length(orderID) = 6
    AND orderID <> 'Order ID';

/*How many of those orders were for an iPhone? ANSWER: 379*/
SELECT COUNT(orderID) FROM BIT_DB.JanSales    
    WHERE Product = 'iPhone'
    AND length (orderID) = 6
    AND orderID <> 'Order ID'; 

/*Select the customer account numbers for all the orders that were placed in February. */
SELECT distinct acctnum FROM BIT_DB.customers
    INNER JOIN FebSales
    ON customers.order_id = FebSales.orderID
    WHERE length(orderID) = 6
    AND orderID <> 'Order ID';

/* Which product was the cheapest one sold in January, and what was the price? 4 Query types used. ANSWER: AAA Batteries (4-pack) Price: 2.99*/
/* Query 1*/
SELECT DISTINCT Product, price FROM BIT_DB.JanSales
    WHERE price 
    IN (SELECT MIN(price) FROM BIT_DB.JanSales);
/*Query 2*/
SELECT DISTINCT Product, price FROM BIT_DB.JanSales
    GROUP BY Product, price
    ORDER BY price ASC
    LIMIT 1;
/*Query 3*/
SELECT DISTINCT Product, price FROM BIT_DB.JanSales
    ORDER BY price ASC
    LIMIT 1;
/*Query 4 */
SELECT DISTINCT Product, MIN(price) FROM BIT_DB.JanSales
    GROUP BY product, price
    ORDER BY price ASC
    LIMIT 1;

/*What is the total revenue for each product sold in January? */
SELECT product, sum(quantity) * price AS rev FROM BIT_DB.JanSales
    GROUP BY product;

/*Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?*/
SELECT product, price, SUM(quantity), SUM(quantity) * price as REV, location FROM BIT_DB.FebSales
    WHERE location = '548 Lincoln St, Seattle, WA 98101'
    GROUP BY product;

/*How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?*/
SELECT COUNT(DISTINCT customers.acctnum), AVG(quantity*price) FROM BIT_DB.FebSales FebSales
    LEFT JOIN BIT_DB.customers customers
    ON FebSales.orderID = customers.order_id
    WHERE FebSales.quantity > 2
    AND length(orderID) = 6
    AND orderID <> 'Order ID';

/*List all the products sold in Los Angeles in February, and include how many of each were sold.*/
SELECT product, SUM(quantity) FROM BIT_DB.FebSales 
    WHERE location LIKE '%Los Angeles%'
    Group BY product;

/*Which locations in New York received at least 3 orders in January, and how many orders did they each receive?*/
SELECT DISTINCT location, COUNT (orderID) FROM BIT_DB.JanSales
    WHERE Location LIKE '%NY%'
    AND length(orderID)= 6
    AND orderID <> 'Order ID'
    GROUP BY location
    HAVING count(orderID) > 2;
    
/*How many of each type of headphone were sold in February?*/
SELECT product, SUM(quantity) from BIT_DB.FebSales
    WHERE product LIKE '%Headphones%'
    GROUP BY product;

/*What was the average amount spent per account in February?*/
/*Option 1*/
SELECT avg(Quantity*price) FROM BIT_DB.FebSales FebSales
    LEFT JOIN BIT_DB.customers customers
    ON FebSales.orderID = customers.order_id
    WHERE length(orderID) = 6
    AND orderID <> 'Order ID';

/*Option 2*/
SELECT SUM(quantity*price)/COUNT (customers.acctnum) FROM BIT_DB.FebSales FebSales
    LEFT JOIN BIT_DB.customers Customers
    ON FebSales.orderID  = Customers.order_id
    WHERE length(orderID) = 6
    AND orderID <> 'Order ID'; 

/*What was the average quantity of products purchased per account in February?*/
SELECT SUM(quantity) /COUNT (customers.acctnum) FROM BIT_DB.FebSales FebSales
    LEFT JOIN BIT_DB.customers Customers
    ON FebSales.orderID  = Customers.order_id
    WHERE length(orderID) = 6
    AND orderID <> 'Order ID'; 
    
 /*Which product brought in the most revenue in January and how much revenue did it bring in total?*/
 SELECT product, sum(quantity * price) AS TotalREV FROM BIT_DB.JanSales    
    GROUP BY product
    ORDER BY TotalREV DESC
    LIMIT 1;
 
 
 
 
